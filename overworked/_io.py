# -*- coding: utf-8 -*-

"""
=============
IO Operations
=============

Mostly open images, save images, and export tables.
"""

from __future__ import division, print_function, absolute_import

from typical import checks, iterable, numeric

from overworked._coordinates import (
    sheet_ordinate,
    sheet_page)

###############################################################################
# OUTPUT CONSTANTS
###############################################################################

IMAGE_SPECIFICATIONS_STR = """image ({width} x {height}) ratio {ratio}"""

PATTERN_SPECIFICATIONS_STR = """pattern ({width} x {height}) ratio {ratio}"""

BOOK_PAGE = """
"""

SHEET_SIZE_LINE ="""
"""

HORIZONTAL_MARGIN_LINE = """
"""

VERTICAL_MARGIN_LINE = """
"""

FOLDING_TABLE_DISCLAIMER = """{name:=<080}
The folding marks are measured from the bottom of the page.
The blank pages are meant to be folded all the way, from top to bottom.
The measures are given in cm.
===============================================================================
"""

FOLDING_TABLE_HEADER = """
===============================================================================
{page: <04}\t{lower_mark: <05}\t{upper_mark: <05}
===============================================================================\n"""

FOLDING_TABLE_FOOTER = """
===============================================================================
Generated by the OverWorked Moodule.
Licensed under MIT.
Enjoy your time folding !"""

FOLDING_TABLE_LINE = """{page: <04d}\t{lower: <05.1f}\t{upper: <05.1f}{message}\n"""

WHITE_LINE_WARNING = """\tThis page is WHITE = folded all the way!\n"""

BLACK_LINE_WARNING = """\tThis page is BLACK = not folded !\n"""

NOT_ENOUGH_PAGES_WARNING = """! The book has only {sheet_count} sheets of paper while the pattern requires {band_count} !"""

###############################################################################
# OUTPUT CONSTANTS
###############################################################################

@checks
def _is_white(
        lower: numeric,
        upper: numeric) -> bool:
    """
    Says whether a pattern band is blank.

    Parameters
    ----------
    lower: numeric :
        
    upper: numeric :
        

    Returns
    -------

    """
    return (lower >= upper)

@checks
def _is_black(
        lower: numeric,
        upper: numeric) -> bool:
    """
    Says whether a pattern band is black.

    Parameters
    ----------
    lower: numeric :
        
    upper: numeric :
        

    Returns
    -------

    """
    return (
        lower <= 0.0
        and upper >= 1.0)

#####################################################################
# FOLDING TABLE
#####################################################################

@checks
def _pattern_slice_to_folding_marks(
        page: int,
        sheet_height: numeric,
        sheet_margin: numeric,
        slice_: iterable) -> str:
    """
    

    Parameters
    ----------
    page: int :
        
    sheet_height: numeric :
        
    sheet_margin: numeric :
        
    slice_: iterable :
        

    Returns
    -------

    """
    __message = ''
    if _is_black(lower=slice_[0], upper=slice_[1]):
        __message = BLACK_LINE_WARNING
    elif _is_white(lower=slice_[0], upper=slice_[1]):
        __message = WHITE_LINE_WARNING

    return FOLDING_TABLE_LINE.format(
        page=page,
        lower=sheet_ordinate(
            ratio=slice_[0],
            height=sheet_height,
            margin=sheet_margin),
        upper=sheet_ordinate(
            ratio=slice_[1],
            height=sheet_height,
            margin=sheet_margin),
        message=__message)

@checks
def generate_folding_table(
        name: str,
        first_page: int,
        sheet_height: int,
        horizontal_margin: int,
        vertical_margin: numeric,        
        slices: iterable,) -> str:
    """
    

    Parameters
    ----------
    name: str :
        
    first_page: int :
        
    sheet_height: int :
        
    horizontal_margin: int :
        
    vertical_margin: numeric :
        
    slices: iterable :
        

    Returns
    -------

    """
    __folding_table = FOLDING_TABLE_DISCLAIMER.format(
        name='= ' + name + ' ')
    
    __folding_table += FOLDING_TABLE_HEADER.format(
        page='Page',
        lower_mark='Lower',
        upper_mark='upper')

    for i, __slice in enumerate(slices):
        __folding_table += _pattern_slice_to_folding_marks(
            page=sheet_page(
                index=i,
                first_page=first_page,
                margin=horizontal_margin),
            sheet_height=sheet_height,
            sheet_margin=vertical_margin,
            slice_= __slice)

    __folding_table += FOLDING_TABLE_FOOTER

    return __folding_table
